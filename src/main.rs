use clap::{crate_authors, crate_version, Clap};
use color_eyre::eyre::Result;

use std::fs;
use std::path::PathBuf;

use tremor_benchmark::{convert_into_relevant_data, deserialize, serialize, update_json};

#[derive(Clap)]
#[clap(version = crate_version!(), author = crate_authors!())]
struct Opts {
    /// Path to the JSON file where your benchmark data is stored
    data_file: PathBuf,
    /// Path to the JSON file where the last benchmark data is to be stored
    recent_file: PathBuf,
    /// Path to the report JSON file generated by the Tremor CLI
    report_file: PathBuf,
}

fn main() -> Result<()> {
    color_eyre::install()?;

    let opts: Opts = Opts::parse();

    fs::write(
        &opts.recent_file,
        serialize(&convert_into_relevant_data(deserialize(
            &fs::read_to_string(&opts.report_file)?,
        )?)?)?,
    )?;

    fs::write(
        &opts.data_file,
        update_json(
            &fs::read_to_string(&opts.data_file)?,
            &fs::read_to_string(opts.recent_file)?,
        ),
    )?;

    Ok(())
}
